save$beta[,i] = cursam$beta
save$gam[,i] = cursam$gam
save$w[,i] = cursam$w
save$s2[i] = cursam$s2
}
save$beta = save$beta[-(1:500),]
save$gam = save$gam[-(1:500),]
save$w = save$w[-(1:500),]
save$s2 = save$s2[-(1:500)]
dim(save$beta)
for(i in 1:I){
cursam$s2 = 1/rgamma(1, shape = n/2+a_s, scale = b_s + 0.5*sum((y-X%*%cursam$beta)^2) )
cursam$D = (v_0^2)*as.numeric(cursam$gam==0)*diag(p) + (v_1^2)*as.numeric(cursam$gam==1)*diag(p)
cursam$beta = beta.hat + solve(chol(XtX + solve(cursam$D)))%*%rnorm(p)
for(j in 1:p){
cursam$gam[j] = rbinom(1,1,
cursam$w[j]*dnorm(cursam$beta[j],0,v_1)/(cursam$w[j]*dnorm(cursam$beta[j],0,v_1) + (1-cursam$w[j])*dnorm(cursam$beta[j],0,v_0)))
cursam$w[j] = rbeta(1,cursam$gam[j]+a_w,1-cursam$gam[j]+b_w)
}
#save samples
save$beta[,i] = cursam$beta
save$gam[,i] = cursam$gam
save$w[,i] = cursam$w
save$s2[i] = cursam$s2
}
save$beta = save$beta[,-(1:500)]
save$gam = save$gam[,-(1:500)]
save$w = save$w[,-(1:500)]
save$s2 = save$s2[-(1:500)]
dim(save$beta)
I = 1500
save <- NULL
save$beta = matrix(NA,p,I)
save$s2 = rep(NA,I)
save$gam = matrix(NA,p,I)
save$w = matrix(NA,p,I)
for(i in 1:I){
cursam$s2 = 1/rgamma(1, shape = n/2+a_s, scale = b_s + 0.5*sum((y-X%*%cursam$beta)^2) )
cursam$D = (v_0^2)*as.numeric(cursam$gam==0)*diag(p) + (v_1^2)*as.numeric(cursam$gam==1)*diag(p)
cursam$beta = beta.hat + solve(chol(XtX + solve(cursam$D)))%*%rnorm(p)
for(j in 1:p){
cursam$gam[j] = rbinom(1,1,
cursam$w[j]*dnorm(cursam$beta[j],0,v_1)/(cursam$w[j]*dnorm(cursam$beta[j],0,v_1) + (1-cursam$w[j])*dnorm(cursam$beta[j],0,v_0)))
cursam$w[j] = rbeta(1,cursam$gam[j]+a_w,1-cursam$gam[j]+b_w)
}
#save samples
save$beta[,i] = cursam$beta
save$gam[,i] = cursam$gam
save$w[,i] = cursam$w
save$s2[i] = cursam$s2
}
save$beta = save$beta[,-(1:500)]
save$gam = save$gam[,-(1:500)]
save$w = save$w[,-(1:500)]
save$s2 = save$s2[-(1:500)]
dim(save$beta)
plot.ts(rowMeans(save$beta))
source('~/Google Drive/year 3/268/homework 1/spikeandslab.R', echo=TRUE)
help(apply)
apply(sav$beta,1,quantile(x,0.025))
apply(sav$beta,1,function(x) quantile(x,0.025))
apply(save$beta,1,function(x) quantile(x,0.025))
SnS <- NULL
SnS$ps.beta = save$beta
par(mar=c(4,4,1,1))
plot(dat$B,col="red",pch=19,xlab="predictor index",ylab="coefficents",cex.axis=1,cex.lab=1,ylim=c(-2.2,5.2),xlim=c(-0.2,300.2))
par(mar=c(4,4,1,1))
plot(dat$B,col="red",pch=19,xlab="predictor index",ylab="coefficents",cex.axis=1,cex.lab=1,ylim=c(-2.2,5.2),xlim=c(-0.2,300.2))
lines(rowMeans(SnS$ps.beta))
polygon(c(1:p, rev(1:p)), c( apply(SnS$ps.beta,1,function(x) quantile(x,0.975)), rev(apply(SnS$ps.beta,1,function(x) quantile(x,0.025))) ),col="grey", border = NA)
legend("topright",title="model values",legend = c(sprintf("n=%s",n),sprintf("p=%s",p),sprintf("Sig =%s",S.name),sprintf("Beta %s",B.name)),cex=0.8,inset=0.04,box.lty=0)
par(mar=c(4,4,1,1))
plot(dat$B,col="red",pch=19,xlab="predictor index",ylab="coefficents",cex.axis=1,cex.lab=1,ylim=c(-2.2,5.2),xlim=c(-0.2,300.2))
polygon(c(1:p, rev(1:p)), c( apply(SnS$ps.beta,1,function(x) quantile(x,0.975)), rev(apply(SnS$ps.beta,1,function(x) quantile(x,0.025))) ),col="grey", border = NA)
lines(rowMeans(SnS$ps.beta))
legend("topright",title="model values",legend = c(sprintf("n=%s",n),sprintf("p=%s",p),sprintf("Sig =%s",S.name),sprintf("Beta %s",B.name)),cex=0.8,inset=0.04,box.lty=0)
par(mar=c(4,4,1,1))
plot(dat$B,col="red",type="l",lwd=2,xlab="predictor index",ylab="coefficents",cex.axis=1,cex.lab=1,ylim=c(-2.2,5.2),xlim=c(-0.2,300.2))
polygon(c(1:p, rev(1:p)), c( apply(SnS$ps.beta,1,function(x) quantile(x,0.975)), rev(apply(SnS$ps.beta,1,function(x) quantile(x,0.025))) ),col="grey", border = NA)
lines(rowMeans(SnS$ps.beta))
legend("topright",title="model values",legend = c(sprintf("n=%s",n),sprintf("p=%s",p),sprintf("Sig =%s",S.name),sprintf("Beta %s",B.name)),cex=0.8,inset=0.04,box.lty=0)
par(mar=c(4,4,1,1))
plot(dat$B,col="red",pch=19,xlab="predictor index",ylab="coefficents",cex.axis=1,cex.lab=1,ylim=c(-2.2,5.2),xlim=c(-0.2,300.2))
polygon(c(1:p, rev(1:p)), c( apply(SnS$ps.beta,1,function(x) quantile(x,0.975)), rev(apply(SnS$ps.beta,1,function(x) quantile(x,0.025))) ),col="grey", border = NA)
lines(rowMeans(SnS$ps.beta))
legend("topright",title="model values",legend = c(sprintf("n=%s",n),sprintf("p=%s",p),sprintf("Sig =%s",S.name),sprintf("Beta %s",B.name)),cex=0.8,inset=0.04,box.lty=0)
par(mar=c(4,4,1,1))
plot(dat$B,col="red",pch=19,xlab="predictor index",ylab="coefficents",cex.axis=1,cex.lab=1,ylim=c(-2.2,5.2),xlim=c(-0.2,300.2))
polygon(c(1:p, rev(1:p)), c( apply(SnS$ps.beta,1,function(x) quantile(x,0.975)), rev(apply(SnS$ps.beta,1,function(x) quantile(x,0.025))) ),col="grey", border = NA)
lines(rowMeans(SnS$ps.beta))
legend("topright",title="model values",legend = c(sprintf("n=%s",n),sprintf("p=%s",p),sprintf("Sig =%s",S.name),sprintf("Beta %s",B.name)),cex=0.8,inset=0.04,box.lty=0)
source('~/Google Drive/year 3/268/homework 1/spikeandslab.R', echo=TRUE)
plot(rowMeans(save$gam))
plot.ts(1:p,rowMeans(save$gam))
lines(p.mean.beta,lwd=0.5)
plot(rowMeans(save$gam),type="l")
plot(rowMeans(save$gam),type="l",lwd=0.5)
plot(rowMeans(save$gam),type="l",lwd=0.7)
load("dat_n500_p100_S2_B1.Rda")
newX = rmnorm(50,rep(0,dat$p),dat$S)
true.y = rnorm(50,newX%*%dat$B,1)
SnS = spikeandslab(dat$y,dat$X)
dim(newX%*%SnS$ps.beta)
matrix(1:4,2,2) + c(1,2)
matrix(1:4,2,2)
y.pred = newX%*%SnS$ps.beta + SnS$ps.s2
y.pred = newX%*%SnS$ps.beta + SnS$ps.s2
ub.y = apply(y.pred.beta,1,function(x) quantile(x,0.975))
lb.y = apply(y.pred,1,function(x) quantile(x,0.025))
p.mean.y = rowMeans(y.pred)
MSPE = mean( (y.pred - p.mean.y)^2 )
ub.y = apply(y.pred,1,function(x) quantile(x,0.975))
lb.y = apply(y.pred,1,function(x) quantile(x,0.025))
p.mean.y = rowMeans(y.pred)
MSPE = mean( (y.pred - p.mean.y)^2 )
par(mar=c(4,4,1,1))
plot(true.y,col="red",pch=19,xlab="predictor index",ylab="new responses, y",cex.axis=1,cex.lab=1,xlim=c(-0.2,50.2))
polygon(c(1:p, rev(1:p)), c(ub.y, rev(lb.y) ),col="grey", border = NA)
lines(p.mean.y,lwd=0.6)
legend("topleft",legend = c(sprintf("MSPE=%s",MSPE)),cex=0.8,inset=0.04,box.lty=0)
plot(true.y,col="red",pch=19,xlab="predictor index",ylab="new responses, y",cex.axis=1,cex.lab=1,xlim=c(-0.2,50.2))
polygon(c(1:p, rev(1:p)), c(ub.y, rev(lb.y) ),col="grey", border = NA)
lines(p.mean.y,lwd=0.6)
legend("topleft",legend = c(sprintf("MSPE=%s",round(MSPE,3))),cex=0.8,inset=0.04,box.lty=0)
hist(y.pred[,1])
dim(y.pred)
hist(y.pred[1,])
par(mar=c(4,4,1,1))
plot(true.y,col="red",pch=19,xlab="predictor index",ylab="new responses, y",cex.axis=1,cex.lab=1,xlim=c(-0.2,50.2))
polygon(c(1:50, rev(1:50)), c(ub.y, rev(lb.y) ),col="grey", border = NA)
par(mar=c(4,4,1,1))
plot(true.y,col="red",pch=19,xlab="predictor index",ylab="new responses, y",cex.axis=1,cex.lab=1,xlim=c(-0.2,50.2))
polygon(c(1:50, rev(1:50)), c(ub.y, rev(lb.y) ),col="grey", border = NA)
lines(p.mean.y,lwd=0.6)
legend("topleft",legend = c(sprintf("MSPE=%s",round(MSPE,3))),cex=0.8,inset=0.04,box.lty=0)
points(true.y,col="red",pch=19)
par(mfrow=c(1,1))
par(mar=c(4,4,1,1))
plot.ts(1:p,rowMeans(SnS$ps.gam),xlab="predictor index",ylab="posterior mean gamma",cex.axis=1,cex.lab=1,ylim=c(-0.2,1.2),xlim=c(-0.2,300.2))
legend("topright",title="model values",legend = c(sprintf("n=%s",n),sprintf("p=%s",p),sprintf("Sig =%s",S.name),sprintf("Beta %s",B.name)),cex=0.8,inset=0.04,box.lty=0)
load("dat_n500_p100_S2_B1.Rda")
library(mnormt)
library(glmnet)
source('~/Google Drive/year 3/268/homework 1/spikeandslab.R')
#sample size
nn = 1:2
all.n = c(500,400)
#beta size
np = 1:2
all.p = c(100,300)
#beta covariance
nS = 1:2
S2 = function(p){Sig = diag(p)
for(r in 1:p){
for(c in 1:p){
Sig[r,c] = (0.6)^(abs(r-c))}}
return(Sig)}
#beta values
nB = 1:2
S.name = "I"
setwd("~/Google Drive/year 3/268/homework 1/datasets")
load("dat_n500_p100_S2_B1.Rda")
newX = rmnorm(50,rep(0,dat$p),dat$S)
true.y = rnorm(50,newX%*%dat$B,1)
SnS = spikeandslab(dat$y,dat$X)
y.pred = newX%*%SnS$ps.beta + SnS$ps.s2
ub.y = apply(y.pred,1,function(x) quantile(x,0.975))
lb.y = apply(y.pred,1,function(x) quantile(x,0.025))
p.mean.y = rowMeans(y.pred)
MSPE = mean( (y.pred - p.mean.y)^2 )
par(mfrow=c(1,1))
par(mar=c(4,4,1,1))
plot(true.y,col="red",pch=19,xlab="response index",ylab="new responses, y",cex.axis=1,cex.lab=1,xlim=c(-0.2,50.2))
polygon(c(1:50, rev(1:50)), c(ub.y, rev(lb.y) ),col="grey", border = NA)
lines(p.mean.y,lwd=0.6)
legend("topleft",legend = c(sprintf("MSPE=%s",round(MSPE,3))),cex=0.8,inset=0.04,box.lty=0)
points(true.y,col="red",pch=19)
par(mfrow=c(1,1))
par(mar=c(4,4,1,1))
plot.ts(1:p,rowMeans(SnS$ps.gam),xlab="predictor index",ylab="posterior mean gamma",cex.axis=1,cex.lab=1,ylim=c(-0.2,1.2),xlim=c(-0.2,300.2))
legend("topright",title="model values",legend = c(sprintf("n=%s",n),sprintf("p=%s",p),sprintf("Sig =%s",S.name),sprintf("Beta %s",B.name)),cex=0.8,inset=0.04,box.lty=0)
library(mnormt)
library(glmnet)
source('~/Google Drive/year 3/268/homework 1/spikeandslab.R')
#sample size
nn = 1:2
all.n = c(500,400)
#beta size
np = 1:2
all.p = c(100,300)
#beta covariance
nS = 1:2
S2 = function(p){Sig = diag(p)
for(r in 1:p){
for(c in 1:p){
Sig[r,c] = (0.6)^(abs(r-c))}}
return(Sig)}
#beta values
nB = 1:2
par(mfrow=c(4,4))
# load datasets
for(i in nn){
n = all.n[i]
for(j in np){
p = all.p[j]
for(k in nS){
if(k==1){S.name = "I"
}else{S.name = "S_0.6"}
for(l in nB){
if(l ==1){
B.name = "(i)"
}else{ B.name = "(ii)"}
setwd("~/Google Drive/year 3/268/homework 1/datasets")
load(sprintf("dat_n%s_p%s_S%s_B%s.Rda",n,p,k,l))
m.lassoglm <- cv.glmnet(dat$X,dat$y)
m.lassoglm1 <- glmnet(dat$X,dat$y,lambda=m.lassoglm$lambda.min,family="gaussian", alpha=1)
par(mar=c(4,4,1,1))
plot(dat$B,col="red",pch=19,xlab="predictor index",ylab="coefficents",cex.axis=1,cex.lab=1,ylim=c(-2.2,5.2),xlim=c(-0.2,300.2))
lines(m.lassoglm1$bet)
legend("topright",title="model values",legend = c(sprintf("n=%s",n),sprintf("p=%s",p),sprintf("Sig =%s",S.name),sprintf("Beta %s",B.name)),cex=0.8,inset=0.04,box.lty=0)
}
}
}
}
par(mfrow=c(4,4))
# load datasets
for(i in nn){
n = all.n[i]
for(j in np){
p = all.p[j]
for(k in nS){
if(k==1){S.name = "I"
}else{S.name = "S_0.6"}
for(l in nB){
if(l ==1){
B.name = "(i)"
}else{ B.name = "(ii)"}
setwd("~/Google Drive/year 3/268/homework 1/datasets")
load(sprintf("dat_n%s_p%s_S%s_B%s.Rda",n,p,k,l))
m.lassoglm <- cv.glmnet(dat$X,dat$y)
m.lassoglm1 <- glmnet(dat$X,dat$y,lambda=m.lassoglm$lambda.min,family="gaussian", alpha=0)
par(mar=c(4,4,1,1))
plot(dat$B,col="red",pch=19,xlab="predictor index",ylab="coefficents",cex.axis=1,cex.lab=1,ylim=c(-2.2,5.2),xlim=c(-0.2,300.2))
lines(m.lassoglm1$bet)
legend("topright",title="model values",legend = c(sprintf("n=%s",n),sprintf("p=%s",p),sprintf("Sig =%s",S.name),sprintf("Beta %s",B.name)),cex=0.8,inset=0.04,box.lty=0)
}
}
}
}
compare <- NULL
compare$m_nz <- compare$m_z <- compare$MSE <- rep(NA,16)
count = 1
par(mfrow=c(4,4))
# load datasets
for(i in nn){
n = all.n[i]
for(j in np){
p = all.p[j]
for(k in nS){
if(k==1){S.name = "I"
}else{S.name = "S_0.6"}
for(l in nB){
if(l ==1){
B.name = "(i)"
}else{ B.name = "(ii)"}
setwd("~/Google Drive/year 3/268/homework 1/datasets")
load(sprintf("dat_n%s_p%s_S%s_B%s.Rda",n,p,k,l))
SnS = spikeandslab(dat$y,dat$X)
#save needed values for next parts E(beta|y), MSE, M_zero, M_nonzero
ub.beta = apply(SnS$ps.beta,1,function(x) quantile(x,0.975))
lb.beta = apply(SnS$ps.beta,1,function(x) quantile(x,0.025))
p.mean.beta = rowMeans(SnS$ps.beta)
L = ub.beta - lb.beta
compare$m_nz[count] = mean(L[which(dat$B!=0)])
compare$m_z[count] = mean(L[which(dat$B==0)])
compare$MSE[count] = mean( (dat$B-p.mean.beta)^2 )
count = count + 1
par(mar=c(4,4,1,1))
plot(dat$B,col="red",pch=19,xlab="predictor index",ylab="coefficents",cex.axis=1,cex.lab=1,ylim=c(-2.2,5.2),xlim=c(-0.2,300.2))
polygon(c(1:p, rev(1:p)), c(ub.beta, rev(lb.beta) ),col="grey", border = NA)
lines(p.mean.beta,lwd=0.6)
legend("topright",title="model values",legend = c(sprintf("n=%s",n),sprintf("p=%s",p),sprintf("Sig =%s",S.name),sprintf("Beta %s",B.name)),cex=0.8,inset=0.04,box.lty=0)
legend("center",title="measures of fit",legend = c(sprintf("MSE=%s",compare$MSE),sprintf("M_nz=%s",compare$m_nz),sprintf("M_z=%s",compare$m_z)),cex=0.8,inset=0.04,box.lty=0)
}
}
}
}
i = 1
j = 1
k =1
l=1
p = all.p[j]
n = all.n[i]
if(k==1){S.name = "I"
}else{S.name = "S_0.6"}
if(l ==1){
B.name = "(i)"
}else{ B.name = "(ii)"}
setwd("~/Google Drive/year 3/268/homework 1/datasets")
load(sprintf("dat_n%s_p%s_S%s_B%s.Rda",n,p,k,l))
n = all.n[i]
n
p = all.p[j]
p
if(k==1){S.name = "I"
}else{S.name = "S_0.6"}
if(l ==1){
B.name = "(i)"
}else{ B.name = "(ii)"}
setwd("~/Google Drive/year 3/268/homework 1/datasets")
load(sprintf("dat_n%s_p%s_S%s_B%s.Rda",n,p,k,l))
SnS = spikeandslab(dat$y,dat$X)
setwd("~/Google Drive/year 3/268/homework 1/datasets")
load(sprintf("dat_n%s_p%s_S%s_B%s.Rda",n,p,k,l))
SnS = spikeandslab(dat$y,dat$X)
setwd("~/Google Drive/year 3/268/homework 1/datasets")
load(sprintf("dat_n%s_p%s_S%s_B%s.Rda",n,p,k,l))
SnS = spikeandslab(dat$y,dat$X)
ub.beta = apply(SnS$ps.beta,1,function(x) quantile(x,0.975))
lb.beta = apply(SnS$ps.beta,1,function(x) quantile(x,0.025))
length(ub.beta)
length(lb.beta)
dim(SnS$ps.beta)
summary(SnS$ps.beta)
p.mean.beta = rowMeans(SnS$ps.beta)
L = ub.beta - lb.beta
length(L)
summary(L)
which(dat$B!=0)
which(dat$B==0)
L[which(dat$B!=0)]
L[which(dat$B==0)]
par(mfrow=c(4,4))
# load datasets
for(i in nn){
n = all.n[i]
for(j in np){
p = all.p[j]
for(k in nS){
if(k==1){S.name = "I"
}else{S.name = "S_0.6"}
for(l in nB){
if(l ==1){
B.name = "(i)"
}else{ B.name = "(ii)"}
setwd("~/Google Drive/year 3/268/homework 1/datasets")
load(sprintf("dat_n%s_p%s_S%s_B%s.Rda",n,p,k,l))
SnS = spikeandslab(dat$y,dat$X)
#save needed values for next parts E(beta|y), MSE, M_zero, M_nonzero
ub.beta = apply(SnS$ps.beta,1,function(x) quantile(x,0.975))
lb.beta = apply(SnS$ps.beta,1,function(x) quantile(x,0.025))
p.mean.beta = rowMeans(SnS$ps.beta)
L = ub.beta - lb.beta
m_nz = mean(L[which(dat$B!=0)])
m_z = mean(L[which(dat$B==0)])
MSE = mean( (dat$B-p.mean.beta)^2 )
par(mar=c(4,4,1,1))
plot(dat$B,col="red",pch=19,xlab="predictor index",ylab="coefficents",cex.axis=1,cex.lab=1,ylim=c(-2.2,5.2),xlim=c(-0.2,300.2))
polygon(c(1:p, rev(1:p)), c(ub.beta, rev(lb.beta) ),col="grey", border = NA)
lines(p.mean.beta,lwd=0.6)
legend("topright",title="model values",legend = c(sprintf("n=%s",n),sprintf("p=%s",p),sprintf("Sig =%s",S.name),sprintf("Beta %s",B.name)),cex=0.8,inset=0.04,box.lty=0)
legend("center",title="measures of fit",legend = c(sprintf("MSE=%s",MSE),sprintf("M_nz=%s",m_nz),sprintf("M_z=%s",m_z)),cex=0.8,inset=0.04,box.lty=0)
}
}
}
}
par(mfrow=c(4,4))
# load datasets
for(i in nn){
n = all.n[i]
for(j in np){
p = all.p[j]
for(k in nS){
if(k==1){S.name = "I"
}else{S.name = "S_0.6"}
for(l in nB){
if(l ==1){
B.name = "(i)"
}else{ B.name = "(ii)"}
setwd("~/Google Drive/year 3/268/homework 1/datasets")
load(sprintf("dat_n%s_p%s_S%s_B%s.Rda",n,p,k,l))
SnS = spikeandslab(dat$y,dat$X)
#save needed values for next parts E(beta|y), MSE, M_zero, M_nonzero
ub.beta = apply(SnS$ps.beta,1,function(x) quantile(x,0.975))
lb.beta = apply(SnS$ps.beta,1,function(x) quantile(x,0.025))
p.mean.beta = rowMeans(SnS$ps.beta)
L = ub.beta - lb.beta
m_nz = mean(L[which(dat$B!=0)])
m_z = mean(L[which(dat$B==0)])
MSE = mean( (dat$B-p.mean.beta)^2 )
par(mar=c(4,4,1,1))
plot(dat$B,col="red",pch=19,xlab="predictor index",ylab="coefficents",cex.axis=1,cex.lab=1,ylim=c(-2.2,5.2),xlim=c(-0.2,300.2))
polygon(c(1:p, rev(1:p)), c(ub.beta, rev(lb.beta) ),col="grey", border = NA)
lines(p.mean.beta,lwd=0.6)
legend("topright",title="model values",legend = c(sprintf("n=%s",n),sprintf("p=%s",p),sprintf("Sig =%s",S.name),sprintf("Beta %s",B.name)),cex=0.8,inset=0.04,box.lty=0)
legend("center",title="measures of fit",legend = c(sprintf("MSE=%s",round(MSE,3)),sprintf("M_nz=%s",round(m_nz,3)),sprintf("M_z=%s",round(m_z,3))),cex=0.8,inset=0.04,box.lty=0)
}
}
}
}
par(mfrow=c(1,1))
par(mar=c(4,4,1,1))
plot.ts(1:p,rowMeans(SnS$ps.gam),xlab="predictor index",ylab="posterior mean gamma",cex.axis=1,cex.lab=1)
legend("topright",title="model values",legend = c(sprintf("n=%s",n),sprintf("p=%s",p),sprintf("Sig =%s",S.name),sprintf("Beta %s",B.name)),cex=0.8,inset=0.04,box.lty=0)
setwd("~/Google Drive/year 3/268/homework 1/datasets")
load("dat_n500_p100_S2_B1.Rda")
newX = rmnorm(50,rep(0,dat$p),dat$S)
true.y = rnorm(50,newX%*%dat$B,1)
SnS = spikeandslab(dat$y,dat$X)
y.pred = newX%*%SnS$ps.beta + SnS$ps.s2
ub.y = apply(y.pred,1,function(x) quantile(x,0.975))
lb.y = apply(y.pred,1,function(x) quantile(x,0.025))
p.mean.y = rowMeans(y.pred)
MSPE = mean( (y.pred - p.mean.y)^2 )
par(mfrow=c(1,1))
par(mar=c(4,4,1,1))
plot(true.y,col="red",pch=19,xlab="response index",ylab="new responses, y",cex.axis=1,cex.lab=1,xlim=c(-0.2,50.2))
polygon(c(1:50, rev(1:50)), c(ub.y, rev(lb.y) ),col="grey", border = NA)
lines(p.mean.y,lwd=0.6)
legend("topleft",legend = c(sprintf("MSPE=%s",round(MSPE,3))),cex=0.8,inset=0.04,box.lty=0)
points(true.y,col="red",pch=19)
setwd("~/Google Drive/year 3/268/homework 1/datasets")
load("dat_n500_p100_S2_B1.Rda")
newX = rmnorm(50,rep(0,dat$p),dat$S)
true.y = rnorm(50,newX%*%dat$B,1)
SnS = spikeandslab(dat$y,dat$X)
y.pred = newX%*%SnS$ps.beta + SnS$ps.s2
ub.y = apply(y.pred,1,function(x) quantile(x,0.975))
lb.y = apply(y.pred,1,function(x) quantile(x,0.025))
p.mean.y = rowMeans(y.pred)
MSPE = mean( (y.pred - p.mean.y)^2 )
par(mfrow=c(1,1))
par(mar=c(4,4,1,1))
plot(true.y,col="red",pch=19,xlab="response index",ylab="new responses, y",cex.axis=1,cex.lab=1,xlim=c(-0.2,50.2))
polygon(c(1:50, rev(1:50)), c(ub.y, rev(lb.y) ),col="grey", border = NA)
lines(p.mean.y,lwd=0.6)
legend("topright",legend = c(sprintf("MSPE=%s",round(MSPE,3))),cex=0.8,inset=0.04,box.lty=0)
points(true.y,col="red",pch=19)
setwd("~/Google Drive/year 3/268/homework 1/datasets")
load("dat_n500_p100_S2_B1.Rda")
newX = rmnorm(50,rep(0,dat$p),dat$S)
true.y = rnorm(50,newX%*%dat$B,1)
SnS = spikeandslab(dat$y,dat$X)
y.pred = newX%*%SnS$ps.beta + SnS$ps.s2
ub.y = apply(y.pred,1,function(x) quantile(x,0.975))
lb.y = apply(y.pred,1,function(x) quantile(x,0.025))
p.mean.y = rowMeans(y.pred)
MSPE = mean( (y.pred - p.mean.y)^2 )
par(mfrow=c(1,1))
par(mar=c(4,4,1,1))
plot(true.y,col="red",pch=19,xlab="response index",ylab="new responses, y",cex.axis=1,cex.lab=1,xlim=c(-0.2,50.2))
arrows(1:50, lb.y, 1:50,  ub.y, length=0.01, angle=90, code=3, lwd=2, col="grey")
#polygon(c(1:50, rev(1:50)), c(ub.y, rev(lb.y) ),col="grey", border = NA)
lines(p.mean.y,lwd=0.6)
legend("topright",legend = c(sprintf("MSPE=%s",round(MSPE,3))),cex=0.8,inset=0.04,box.lty=0)
points(true.y,col="red",pch=19)
setwd("~/Google Drive/year 3/268/homework 1/datasets")
load("dat_n500_p100_S2_B1.Rda")
newX = rmnorm(50,rep(0,dat$p),dat$S)
true.y = rnorm(50,newX%*%dat$B,1)
SnS = spikeandslab(dat$y,dat$X)
y.pred = newX%*%SnS$ps.beta + SnS$ps.s2
ub.y = apply(y.pred,1,function(x) quantile(x,0.975))
lb.y = apply(y.pred,1,function(x) quantile(x,0.025))
p.mean.y = rowMeans(y.pred)
MSPE = mean( (y.pred - p.mean.y)^2 )
par(mfrow=c(1,1))
par(mar=c(4,4,1,1))
plot(true.y,col="red",pch=19,xlab="response index",ylab="new responses, y",cex.axis=1,cex.lab=1,xlim=c(-0.2,50.2))
arrows(1:50, lb.y, 1:50,  ub.y, length=0.01, angle=90, code=3, lwd=2, col="grey")
points(1:50, p.mean.y, pch=19, lwd=1, col="black", cex=.5)
#polygon(c(1:50, rev(1:50)), c(ub.y, rev(lb.y) ),col="grey", border = NA)
#lines(p.mean.y,lwd=0.6)
legend("topright",legend = c(sprintf("MSPE=%s",round(MSPE,3))),cex=0.8,inset=0.04,box.lty=0)
#points(true.y,col="red",pch=19)
library(mnormt)
library(glmnet)
source('~/Google Drive/year 3/268/homework 1/spikeandslab.R')
#sample size
nn = 1:2
all.n = c(500,400)
#beta size
np = 1:2
all.p = c(100,300)
#beta covariance
nS = 1:2
S2 = function(p){Sig = diag(p)
for(r in 1:p){
for(c in 1:p){
Sig[r,c] = (0.6)^(abs(r-c))}}
return(Sig)}
#beta values
nB = 1:2
setwd("~/Google Drive/year 3/268/homework 1/datasets")
load("dat_n500_p100_S2_B1.Rda")
newX = rmnorm(50,rep(0,dat$p),dat$S)
true.y = rnorm(50,newX%*%dat$B,1)
SnS = spikeandslab(dat$y,dat$X)
y.pred = newX%*%SnS$ps.beta + SnS$ps.s2
ub.y = apply(y.pred,1,function(x) quantile(x,0.975))
lb.y = apply(y.pred,1,function(x) quantile(x,0.025))
p.mean.y = rowMeans(y.pred)
MSPE = mean( (y.pred - p.mean.y)^2 )
par(mfrow=c(2,2))
par(mar=c(4,4,1,1))
plot(true.y,col="red",pch=19,xlab="response index",ylab="new responses, y",cex.axis=1,cex.lab=1,xlim=c(-0.2,50.2))
arrows(1:50, lb.y, 1:50,  ub.y, length=0.01, angle=90, code=3, lwd=2, col="grey")
points(1:50, p.mean.y, pch=19, lwd=1, col="black", cex=.5)
#polygon(c(1:50, rev(1:50)), c(ub.y, rev(lb.y) ),col="grey", border = NA)
#lines(p.mean.y,lwd=0.6)
legend("topright",legend = c(sprintf("MSPE=%s",round(MSPE,3))),cex=0.8,inset=0.04,box.lty=0)
#points(true.y,col="red",pch=19)
