dat = data.frame(s1 = s[,1],s2 = s[,2],y = y)
dat = data.frame(s1 = s[,1],s2 = s[,2],y = y)
plot_ly(dat, x = s1, y = s2,color = ~y)
dat = data.frame(s1 = s[,1],s2 = s[,2],y = y)
plot_ly(dat, x = s1, y = s2,color = ~y)
plot_ly(dat, s1, s2,color = ~y)
dat = data.frame(s1 = s[,1],s2 = s[,2],y = y)
plot_ly(dat, s1, s2,color = ~y)
dat = data.frame(x = s[,1],z = s[,2],y = y)
dat = data.frame(x = s[,1],z = s[,2],y = y)
plot_ly(dat, s[,1], s[,2],color = ~y)
dat = data.frame(x = s[,1],y = s[,2],z = y)
plot_ly(dat, s[,1], s[,2],color = ~y)
dat = data.frame(x = s[,1],y = s[,2],z = y)
plot_ly(dat, s[,1], s[,2],color = ~y)
plot_ly(dat, x=s[,1], y=s[,2],color = ~y)
plot_ly(dat, x=s[,1], y=s[,2],color = ~z)
help(plot_ly)
dat = data.frame(x = s[,1],y = s[,2],z = y,type="scatter")
dat = data.frame(x = s[,1],y = s[,2],z = y)
plot_ly(dat, x=s[,1], y=s[,2],color = ~z,type="scatter")
dat = data.frame(s1 = s[,1],s2 = s[,2],y = y)
dat = data.frame(s1 = s[,1],s2 = s[,2],y = y)
plot_ly(dat, x=~s1, y=~s2,color = ~y,type="scatter")
sim_data <- NULL
setwd("~/Google Drive/year 3/268/homework 3")
sim_data <- NULL
sim_data$s = s
sim_data$sig2 = sig2
sim_data$phi = phi
sim_data$C = C
sim_data$w_0 = w_0
sim_data$beta = beta
sim_data$tau2_0 = tau2_0
sim_data$y = y
setwd("~/Google Drive/year 3/268/homework 3")
save(sim_data,file="hw3_sim_data.Rda")
dist(c(1,3))
dist(c(1,3,6))
dist(c(1,3,6,7))
as.matrix(dist(c(1,3,6,7)))
setwd("~/Google Drive/year 3/268/homework 3")
load("hw3_sim_data.Rda")
library("plotly")
dat = data.frame(s1 = sim_data$s[,1],s2 = sim_data$s[,2],y = sim_data$y)
plot_ly(dat, x=~s1, y=~s2, color = ~y, type="scatter")
y = sim_data$y
x = sim_data$s
n = length(y)
D21 = as.matrix(dist(x[,1]))^2
D22 = as.matrix(dist(x[,2]))^2
dist = sqrt(D21^2 + D22^2)
head(dist)
dist[1:3,1:3]
taper.C = function(nu){
C = matrix(0,2000,2000)
C[as.matrix(which(dist<nu)] = (1-dist[which(dist>nu)])^2}
exp.C = function(phi){ exp( -phi*dist )}
# logit functions
logit = function(z){ log((z-hyper$a_l)/(hyper$b_l-z)) }
inv.logit = function(z){ (hyper$b_l*exp(z)+hyper$a_l)/( exp(z)+1 ) }
# log posterior function
transformed_log_post = function(sig_2,tau_2,S,l_2){
lp =  dmvnorm(y,rep(0,n),diag(sig_2,n)+tau_2*S,log=TRUE) +
(-hyper$a_t-1)*log(tau_2) - hyper$b_t/tau_2 + (-hyper$a_s-1)*log(sig_2) - hyper$b_s/sig_2 +
log(sig_2) + log(tau_2) + sum(log((hyper$b_l-hyper$a_l)*exp(logit(l_2)))) - sum(2*log(exp(logit(l_2))+1))
return(lp)
}
# hyperpriors
hyper <- NULL
hyper$a_t = 2
hyper$b_t = .3
hyper$a_s = 2
hyper$b_s = 6
hyper$a_l = .01
hyper$b_l = 4
# initialize MCMC
cur_sam <- NULL
cur_sam$sig_2 = .2
cur_sam$tau_2 = 40
cur_sam$l_2 = c(.2,2)
S = kern(cur_sam$l_2)
n_iter = 2000
burn = 800
save_MCMC <- NULL
save_MCMC$sig_2 = rep(NA,n_iter)
save_MCMC$tau_2 = rep(NA,n_iter)
save_MCMC$l_2 = matrix(NA,n_iter,dim(x)[2])
count = 0
# MCMC
for(i_iter in 1:n_iter){
if((i_iter%%100)==0)
{
print(paste("i.sam=", i_iter))
print(date())
}
prop_sig_2 = exp(log(cur_sam$sig_2) + rnorm(1, 0, .1))
prop_tau_2 = exp(log(cur_sam$tau_2) + rnorm(1, 0, .5))
prop_l_2 = c(inv.logit(logit(cur_sam$l_2) + c(rnorm(1,0,.2),rnorm(1,0,.2)) ) )
prop_S = kern(prop_l_2)
accept = transformed_log_post(prop_sig_2,prop_tau_2,prop_S,prop_l_2) - transformed_log_post(cur_sam$sig_2,cur_sam$tau_2,S,cur_sam$l_2)
if(log(runif(1))<=accept){
cur_sam$sig_2 = prop_sig_2
cur_sam$tau_2 = prop_tau_2
cur_sam$l_2 = prop_l_2
S  = prop_S
count = count + 1
}
save_MCMC$sig_2[i_iter] = cur_sam$sig_2
save_MCMC$tau_2[i_iter] = cur_sam$tau_2
save_MCMC$l_2[i_iter,] = cur_sam$l_2
}
print(count/n_iter)
plot(save_MCMC$sig_2[burn:n_iter],type = "l",main='sig_2')
plot(save_MCMC$tau_2[burn:n_iter],type = "l",main='tau_2')
plot(save_MCMC$l_2[burn:n_iter,1],type = "l",main='l_2[1]')
plot(save_MCMC$l_2[burn:n_iter,2],type = "l",main='l_2[2]')
taper.C = function(nu){
C = matrix(0,2000,2000)
C[as.matrix(which(dist<nu)] = (1-dist[which(dist>nu)])^2 }
exp.C = function(phi){ exp( -phi*dist )}
# logit functions
logit = function(z){ log((z-hyper$a_l)/(hyper$b_l-z)) }
inv.logit = function(z){ (hyper$b_l*exp(z)+hyper$a_l)/( exp(z)+1 ) }
# log posterior function
transformed_log_post = function(sig_2,tau_2,S,l_2){
lp =  dmvnorm(y,rep(0,n),diag(sig_2,n)+tau_2*S,log=TRUE) +
(-hyper$a_t-1)*log(tau_2) - hyper$b_t/tau_2 + (-hyper$a_s-1)*log(sig_2) - hyper$b_s/sig_2 +
log(sig_2) + log(tau_2) + sum(log((hyper$b_l-hyper$a_l)*exp(logit(l_2)))) - sum(2*log(exp(logit(l_2))+1))
return(lp)
}
# hyperpriors
hyper <- NULL
hyper$a_t = 2
hyper$b_t = .3
hyper$a_s = 2
hyper$b_s = 6
hyper$a_l = .01
hyper$b_l = 4
# initialize MCMC
cur_sam <- NULL
cur_sam$sig_2 = .2
cur_sam$tau_2 = 40
cur_sam$l_2 = c(.2,2)
S = kern(cur_sam$l_2)
n_iter = 2000
burn = 800
save_MCMC <- NULL
save_MCMC$sig_2 = rep(NA,n_iter)
save_MCMC$tau_2 = rep(NA,n_iter)
save_MCMC$l_2 = matrix(NA,n_iter,dim(x)[2])
count = 0
# MCMC
for(i_iter in 1:n_iter){
if((i_iter%%100)==0)
{
print(paste("i.sam=", i_iter))
print(date())
}
prop_sig_2 = exp(log(cur_sam$sig_2) + rnorm(1, 0, .1))
prop_tau_2 = exp(log(cur_sam$tau_2) + rnorm(1, 0, .5))
prop_l_2 = c(inv.logit(logit(cur_sam$l_2) + c(rnorm(1,0,.2),rnorm(1,0,.2)) ) )
prop_S = kern(prop_l_2)
accept = transformed_log_post(prop_sig_2,prop_tau_2,prop_S,prop_l_2) - transformed_log_post(cur_sam$sig_2,cur_sam$tau_2,S,cur_sam$l_2)
if(log(runif(1))<=accept){
cur_sam$sig_2 = prop_sig_2
cur_sam$tau_2 = prop_tau_2
cur_sam$l_2 = prop_l_2
S  = prop_S
count = count + 1
}
save_MCMC$sig_2[i_iter] = cur_sam$sig_2
save_MCMC$tau_2[i_iter] = cur_sam$tau_2
save_MCMC$l_2[i_iter,] = cur_sam$l_2
}
print(count/n_iter)
plot(save_MCMC$sig_2[burn:n_iter],type = "l",main='sig_2')
plot(save_MCMC$tau_2[burn:n_iter],type = "l",main='tau_2')
plot(save_MCMC$l_2[burn:n_iter,1],type = "l",main='l_2[1]')
plot(save_MCMC$l_2[burn:n_iter,2],type = "l",main='l_2[2]')
taper.C = function(nu){
C = matrix(0,2000,2000)
C[as.matrix(which(dist<nu)] = (1-dist[which(dist>nu)])^2 }
taper.C = function(nu){
C = matrix(0,2000,2000)
C[which(dist<nu] = (1-dist[which(dist>nu)])^2 }
taper.C = function(nu){
C = matrix(0,2000,2000)
C[which(dist<nu)] = (1-dist[which(dist>nu)])^2 }
taper.C.fn = function(nu){
C = matrix(0,2000,2000)
C[which(dist<nu)] = (1-dist[which(dist>nu)])^2 }
taper.C.fn(.2)
taper.C.fn = function(nu){
C = matrix(0,2000,2000)
C[which(dist<nu)] = (1-dist[which(dist<nu)])^2 }
taper.C.fn(.2)
taper.C.fn = function(nu){
C = matrix(0,2000,2000)
C[which(dist<nu)] = (1-dist[which(dist<nu)])^2
return(C)}
taper.C = taper.C.fn(.2)
dist[1:3,1:3]
taper.C = taper.C.fn(.2)
taper.C[1:3,1:3]
logit = function(z){ log((z-hyper$a_l)/(hyper$b_l-z)) }
inv.logit = function(z){ (hyper$b_l*exp(z)+hyper$a_l)/( exp(z)+1 ) }
hyper <- NULL
hyper$a_t = 2
hyper$b_t = .01
hyper$a_s = 2
hyper$b_s = 1
hyper$a_p = 0.5
hyper$b_p = 4.5
transformed_log_post = function(sig2,tau2,S,phi){
lp =  dmvnorm(y,rep(0,n),diag(tau2,n)+sig2*S,log=TRUE) +
(-hyper$a_s-1)*log(sig2) - hyper$b_s/sig2 + (-hyper$a_t-1)*log(tau2) - hyper$b_t/tau2 +
log(tau2) + log(sig2) + log((hyper$b_p-hyper$a_p)*exp(logit(phi))) - 2*log(exp(logit(phi))+1)
return(lp)
}
nu = sqrt(2) #
cur_sam <- NULL
cur_sam$sig2 = 1
cur_sam$tau2 = 0.1
cur_sam$phi = 1
S = exp.C.fn(phi)*taper.C.fn(nu)
exp.C.fn = function(phi){ exp( -phi*dist )}
S = exp.C.fn(cur_sam$phi)*taper.C.fn(nu)
n_iter = 2000
burn = 800
save_MCMC <- NULL
save_MCMC$sig2 = rep(NA,n_iter)
save_MCMC$tau2 = rep(NA,n_iter)
save_MCMC$phi = rep(NA,n_iter)
count = 0
n_iter = 500
burn = 100
save_MCMC <- NULL
save_MCMC$sig2 = rep(NA,n_iter)
save_MCMC$tau2 = rep(NA,n_iter)
save_MCMC$phi = rep(NA,n_iter)
count = 0
for(i_iter in 1:n_iter){
if((i_iter%%100)==0)
{
print(paste("i.sam=", i_iter))
print(date())
}
prop_sig_2 = exp(log(cur_sam$sig2) + rnorm(1, 0, .1))
prop_tau_2 = exp(log(cur_sam$tau2) + rnorm(1, 0, .5))
prop_phi = inv.logit(logit(cur_sam$phi) + rnorm(1,0,.2) )
prop_S = exp.C.fn(prop_phi)*taper.C.fn(nu)
accept = transformed_log_post(prop_sig_2,prop_tau_2,prop_S,prop_phi) - transformed_log_post(cur_sam$sig_2,cur_sam$tau_2,S,cur_sam$phi)
if(log(runif(1))<=accept){
cur_sam$sig2 = prop_sig_2
cur_sam$tau2 = prop_tau_2
cur_sam$phi = prop_l_2
S  = prop_S
count = count + 1
}
save_MCMC$sig2[i_iter] = cur_sam$sig2
save_MCMC$tau2[i_iter] = cur_sam$tau2
save_MCMC$phi[i_iter,] = cur_sam$phi
}
library(mvtnorm)
for(i_iter in 1:n_iter){
if((i_iter%%100)==0)
{
print(paste("i.sam=", i_iter))
print(date())
}
prop_sig_2 = exp(log(cur_sam$sig2) + rnorm(1, 0, .1))
prop_tau_2 = exp(log(cur_sam$tau2) + rnorm(1, 0, .5))
prop_phi = inv.logit(logit(cur_sam$phi) + rnorm(1,0,.2) )
prop_S = exp.C.fn(prop_phi)*taper.C.fn(nu)
accept = transformed_log_post(prop_sig_2,prop_tau_2,prop_S,prop_phi) - transformed_log_post(cur_sam$sig_2,cur_sam$tau_2,S,cur_sam$phi)
if(log(runif(1))<=accept){
cur_sam$sig2 = prop_sig_2
cur_sam$tau2 = prop_tau_2
cur_sam$phi = prop_l_2
S  = prop_S
count = count + 1
}
save_MCMC$sig2[i_iter] = cur_sam$sig2
save_MCMC$tau2[i_iter] = cur_sam$tau2
save_MCMC$phi[i_iter,] = cur_sam$phi
}
diag(tau2, n)
dim(prop_S)
head(prop_S)
prop_S = exp.C.fn(prop_phi)*taper.C.fn(nu)
prop_phi
prop_phi = inv.logit(logit(cur_sam$phi) + rnorm(1,0,.2) )
prop_phi
i_iter = 1
prop_sig_2 = exp(log(cur_sam$sig2) + rnorm(1, 0, .1))
prop_sig_2
prop_tau_2 = exp(log(cur_sam$tau2) + rnorm(1, 0, .5))
prop_tau_2
prop_phi = inv.logit(logit(cur_sam$phi) + rnorm(1,0,.2) )
prop_phi
logit = function(z){ log((z-hyper$a_l)/(hyper$b_l-z)) }
inv.logit = function(z){ (hyper$b_l*exp(z)+hyper$a_l)/( exp(z)+1 ) }
prop_phi = inv.logit(logit(cur_sam$phi) + rnorm(1,0,.2) )
prop_phi
cur_sam$phi
logit(cur_sam$phi)
logit = function(z){ log((z-hyper$a_p)/(hyper$b_p-z)) }
inv.logit = function(z){ (hyper$b_p*exp(z)+hyper$a_p)/( exp(z)+1 ) }
prop_phi = inv.logit(logit(cur_sam$phi) + rnorm(1,0,.2) )
prop_phi
prop_S = exp.C.fn(prop_phi)*taper.C.fn(nu)
dim(prop_S)
prop_S[1:3,1:3]
accept = transformed_log_post(prop_sig_2,prop_tau_2,prop_S,prop_phi) - transformed_log_post(cur_sam$sig_2,cur_sam$tau_2,S,cur_sam$phi)
n
dim(diag(prop_tau_2, n) + prop_sig_2 * S)
transformed_log_post = function(sig2,tau2,S,phi){
lp =  dmvnorm(as.matrix(y,n,1),as.matrix(rep(0,n),n,1),diag(tau2,n)+sig2*S,log=TRUE) +
(-hyper$a_s-1)*log(sig2) - hyper$b_s/sig2 + (-hyper$a_t-1)*log(tau2) - hyper$b_t/tau2 +
log(tau2) + log(sig2) + log((hyper$b_p-hyper$a_p)*exp(logit(phi))) - 2*log(exp(logit(phi))+1)
return(lp)
}
accept = transformed_log_post(prop_sig_2,prop_tau_2,prop_S,prop_phi) - transformed_log_post(cur_sam$sig_2,cur_sam$tau_2,S,cur_sam$phi)
dim(as.matrix(rep(0, n), n, 1))
dim(diag(prop_tau_2, n) + prop_sig_2 * S)
transformed_log_post = function(sig2,tau2,S,phi){
lp =  dmvnorm(as.matrix(y,1,n),as.matrix(rep(0,n),1,n),diag(tau2,n)+sig2*S,log=TRUE) +
(-hyper$a_s-1)*log(sig2) - hyper$b_s/sig2 + (-hyper$a_t-1)*log(tau2) - hyper$b_t/tau2 +
log(tau2) + log(sig2) + log((hyper$b_p-hyper$a_p)*exp(logit(phi))) - 2*log(exp(logit(phi))+1)
return(lp)
}
accept = transformed_log_post(prop_sig_2,prop_tau_2,prop_S,prop_phi) - transformed_log_post(cur_sam$sig_2,cur_sam$tau_2,S,cur_sam$phi)
help("dmvnorm")
transformed_log_post = function(sig2,tau2,S,phi){
lp =  dmvnorm(x=y,mean=rep(0,n),sigma = (diag(tau2,n)+sig2*S),log=TRUE) +
(-hyper$a_s-1)*log(sig2) - hyper$b_s/sig2 + (-hyper$a_t-1)*log(tau2) - hyper$b_t/tau2 +
log(tau2) + log(sig2) + log((hyper$b_p-hyper$a_p)*exp(logit(phi))) - 2*log(exp(logit(phi))+1)
return(lp)
}
accept = transformed_log_post(prop_sig_2,prop_tau_2,prop_S,prop_phi) - transformed_log_post(cur_sam$sig_2,cur_sam$tau_2,S,cur_sam$phi)
setwd("~/Google Drive/year 3/268/homework 3")
load("hw3_sim_data.Rda")
library(mvtnorm)
library("plotly")
dat = data.frame(s1 = sim_data$s[,1],s2 = sim_data$s[,2],y = sim_data$y)
plot_ly(dat, x=~s1, y=~s2, color = ~y, type="scatter")
y = sim_data$y
x = sim_data$s
n = length(y)
n
D21 = as.matrix(dist(x[,1]))^2
D22 = as.matrix(dist(x[,2]))^2
dist = sqrt(D21^2 + D22^2)
taper.C.fn = function(nu){
C = matrix(0,2000,2000)
C[which(dist<nu)] = (1-dist[which(dist<nu)])^2
return(C)}
exp.C.fn = function(phi){ exp( -phi*dist )}
hyper <- NULL
hyper$a_t = 2
hyper$b_t = .01
hyper$a_s = 2
hyper$b_s = 1
hyper$a_p = 0.5
hyper$b_p = 4.5
logit = function(z){ log((z-hyper$a_p)/(hyper$b_p-z)) }
inv.logit = function(z){ (hyper$b_p*exp(z)+hyper$a_p)/( exp(z)+1 ) }
transformed_log_post = function(sig2,tau2,S,phi){
lp =  dmvnorm(x=y,mean=rep(0,n),sigma = (diag(tau2,n)+sig2*S),log=TRUE) +
(-hyper$a_s-1)*log(sig2) - hyper$b_s/sig2 + (-hyper$a_t-1)*log(tau2) - hyper$b_t/tau2 +
log(tau2) + log(sig2) + log((hyper$b_p-hyper$a_p)*exp(logit(phi))) - 2*log(exp(logit(phi))+1)
return(lp)
}
nu = sqrt(2) #
cur_sam <- NULL
cur_sam$sig2 = 1
cur_sam$tau2 = 0.1
cur_sam$phi = 1
S = exp.C.fn(cur_sam$phi)*taper.C.fn(nu)
n_iter = 500
burn = 100
save_MCMC <- NULL
save_MCMC$sig2 = rep(NA,n_iter)
save_MCMC$tau2 = rep(NA,n_iter)
save_MCMC$phi = rep(NA,n_iter)
count = 0
i_iter = 1
prop_sig_2 = exp(log(cur_sam$sig2) + rnorm(1, 0, .5))
prop_tau_2 = exp(log(cur_sam$tau2) + rnorm(1, 0, .1))
prop_phi = inv.logit(logit(cur_sam$phi) + rnorm(1,0,.2) )
prop_S = exp.C.fn(prop_phi)*taper.C.fn(nu)
accept = transformed_log_post(prop_sig_2,prop_tau_2,prop_S,prop_phi) - transformed_log_post(cur_sam$sig_2,cur_sam$tau_2,S,cur_sam$phi)
dim(diag(prop_tau_2,n)+prop_sig_2*prop_S)
length(rep(0,n))
tau2
sig2
S
setwd("~/Google Drive/year 3/268/homework 3")
load("hw3_sim_data.Rda")
library(mvtnorm)
y = sim_data$y
x = sim_data$s
n = length(y)
D21 = as.matrix(dist(x[,1]))^2
D22 = as.matrix(dist(x[,2]))^2
dist = sqrt(D21^2 + D22^2)
taper.C.fn = function(nu){
C = matrix(0,2000,2000)
C[which(dist<nu)] = (1-dist[which(dist<nu)])^2
return(C)}
exp.C.fn = function(phi){ exp( -phi*dist )}
hyper <- NULL
hyper$a_t = 2
hyper$b_t = .01
hyper$a_s = 2
hyper$b_s = 1
hyper$a_p = 0.5
hyper$b_p = 4.5
logit = function(z){ log((z-hyper$a_p)/(hyper$b_p-z)) }
inv.logit = function(z){ (hyper$b_p*exp(z)+hyper$a_p)/( exp(z)+1 ) }
transformed_log_post = function(sig2,tau2,S,phi){
lp =  dmvnorm(x=y,mean=rep(0,n),sigma = (diag(tau2,n)+sig2*S),log=TRUE) +
(-hyper$a_s-1)*log(sig2) - hyper$b_s/sig2 + (-hyper$a_t-1)*log(tau2) - hyper$b_t/tau2 +
log(tau2) + log(sig2) + log((hyper$b_p-hyper$a_p)*exp(logit(phi))) - 2*log(exp(logit(phi))+1)
return(lp)
}
nu = sqrt(2) #
cur_sam <- NULL
cur_sam$sig2 = 1
cur_sam$tau2 = 0.1
cur_sam$phi = 1
cur_sam$S = exp.C.fn(cur_sam$phi)*taper.C.fn(nu)
n_iter = 500
burn = 100
save_MCMC <- NULL
save_MCMC$sig2 = rep(NA,n_iter)
save_MCMC$tau2 = rep(NA,n_iter)
save_MCMC$phi = rep(NA,n_iter)
count = 0
i_iter = 1
prop_sig_2 = exp(log(cur_sam$sig2) + rnorm(1, 0, .5))
prop_tau_2 = exp(log(cur_sam$tau2) + rnorm(1, 0, .1))
prop_phi = inv.logit(logit(cur_sam$phi) + rnorm(1,0,.2) )
prop_S = exp.C.fn(prop_phi)*taper.C.fn(nu)
prop_S[1:3,1:3]
prop_phi
prop_sig_2
prop_tau_2
accept = transformed_log_post(prop_sig_2,prop_tau_2,prop_S,prop_phi) - transformed_log_post(cur_sam$sig_2,cur_sam$tau_2,S,cur_sam$phi)
transformed_log_post = function(sig2,tau2,S,phi){
lp =  dmvnorm(x=y,mean=rep(0,n),sigma = (diag(tau2,n)+sig2*S),log=TRUE) +
(-hyper$a_s-1)*log(sig2) - hyper$b_s/sig2 + (-hyper$a_t-1)*log(tau2) - hyper$b_t/tau2 +
log(tau2) + log(sig2) + log((hyper$b_p-hyper$a_p)*exp(logit(phi))) - 2*log(exp(logit(phi))+1)
return(lp)
}
accept = transformed_log_post(prop_sig_2,prop_tau_2,prop_S,prop_phi) - transformed_log_post(cur_sam$sig_2,cur_sam$tau_2,S,cur_sam$phi)
transformed_log_post = function(sig2,tau2,S,phi){
lp =  dmvnorm(x=y,mean=rep(0,n),sigma=(diag(tau2,n)+(sig2*S)),log=TRUE) +
(-hyper$a_s-1)*log(sig2) - hyper$b_s/sig2 + (-hyper$a_t-1)*log(tau2) - hyper$b_t/tau2 +
log(tau2) + log(sig2) + log((hyper$b_p-hyper$a_p)*exp(logit(phi))) - 2*log(exp(logit(phi))+1)
return(lp)
}
accept = transformed_log_post(prop_sig_2,prop_tau_2,prop_S,prop_phi) - transformed_log_post(cur_sam$sig_2,cur_sam$tau_2,S,cur_sam$phi)
det(1)
det(diag(1,3))
det(diag(1,3),log=TRUE)
log(1)
det(diag(1,3),logarithm=TRUE)
determinant(diag(1,3),logarithm=TRUE)
determinant(diag(1,3),logarithm=TRUE)$modulus
det(diag(2,3))
log(det(diag(2,3)))
transformed_log_post = function(sig2,tau2,S,phi){
lp =  - log(det( diag(tau2,n)+(sig2*S) )) - 0.5(y-rep(0,n))%*%solve(diag(tau2,n)+(sig2*S))%*%t(y-rep(0,n)) +
(-hyper$a_s-1)*log(sig2) - hyper$b_s/sig2 + (-hyper$a_t-1)*log(tau2) - hyper$b_t/tau2 +
log(tau2) + log(sig2) + log((hyper$b_p-hyper$a_p)*exp(logit(phi))) - 2*log(exp(logit(phi))+1)
return(lp)
}
accept = transformed_log_post(prop_sig_2,prop_tau_2,prop_S,prop_phi) - transformed_log_post(cur_sam$sig_2,cur_sam$tau_2,S,cur_sam$phi)
transformed_log_post = function(sig2,tau2,S,phi){
lp =  - log(det( diag(tau2,n)+(sig2*S) )) - 0.5*(y-rep(0,n))%*%solve(diag(tau2,n)+(sig2*S))%*%t(y-rep(0,n)) +
(-hyper$a_s-1)*log(sig2) - hyper$b_s/sig2 + (-hyper$a_t-1)*log(tau2) - hyper$b_t/tau2 +
log(tau2) + log(sig2) + log((hyper$b_p-hyper$a_p)*exp(logit(phi))) - 2*log(exp(logit(phi))+1)
return(lp)
}
accept = transformed_log_post(prop_sig_2,prop_tau_2,prop_S,prop_phi) - transformed_log_post(cur_sam$sig_2,cur_sam$tau_2,S,cur_sam$phi)
transformed_log_post = function(sig2,tau2,S,phi){
lp =  - log(det( diag(tau2,n)+(sig2*S) )) - 0.5*t(y-rep(0,n))%*%solve(diag(tau2,n)+(sig2*S))%*%(y-rep(0,n)) +
(-hyper$a_s-1)*log(sig2) - hyper$b_s/sig2 + (-hyper$a_t-1)*log(tau2) - hyper$b_t/tau2 +
log(tau2) + log(sig2) + log((hyper$b_p-hyper$a_p)*exp(logit(phi))) - 2*log(exp(logit(phi))+1)
return(lp)
}
accept = transformed_log_post(prop_sig_2,prop_tau_2,prop_S,prop_phi) - transformed_log_post(cur_sam$sig_2,cur_sam$tau_2,S,cur_sam$phi)
cur_sam$tau2
accept = transformed_log_post(prop_sig_2,prop_tau_2,prop_S,prop_phi) - transformed_log_post(cur_sam$sig2,cur_sam$tau2,S,cur_sam$phi)
accept = transformed_log_post(prop_sig_2,prop_tau_2,prop_S,prop_phi) - transformed_log_post(cur_sam$sig2,cur_sam$tau2,cur_sam$S,cur_sam$phi)
if(log(runif(1))<=accept){
cur_sam$sig2 = prop_sig_2
cur_sam$tau2 = prop_tau_2
cur_sam$phi = prop_l_2
cur_sam$S  = prop_S
count = count + 1
}
accept
source('~/Google Drive/year 3/268/homework 3/taper.gp.R')
install.packages("plotly")
source('~/Google Drive/year 3/268/homework 3/taper.gp.R')
i_iter
count/i_iter
source('~/Google Drive/year 3/268/homework 3/taper.gp.R')
source('~/Google Drive/year 3/268/homework 3/taper.gp.R')
